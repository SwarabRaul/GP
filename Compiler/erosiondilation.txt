import numpy as np
import cv2
import matplotlib.pyplot as plt

class MorphologicalOperations:
    """
    A class to perform erosion and dilation operations on binary images, with both OpenCV and manual implementations.

    Methods
    -------
    apply_erosion(image, kernel, iterations=1):
        Applies erosion using OpenCV's built-in function.
    
    apply_dilation(image, kernel, iterations=1):
        Applies dilation using OpenCV's built-in function.
    
    manual_erosion(image, kernel):
        Manually applies erosion to a binary image using the specified kernel.
    
    manual_dilation(image, kernel):
        Manually applies dilation to a binary image using the specified kernel.
    
    display_results(original, eroded, dilated, title="Results"):
        Displays the original, eroded, and dilated images side by side.
    """
    
    def apply_erosion(self, image, kernel, iterations=1):
        """Applies erosion using OpenCV's built-in function."""
        return cv2.erode(image, kernel, iterations=iterations)
    
    def apply_dilation(self, image, kernel, iterations=1):
        """Applies dilation using OpenCV's built-in function."""
        return cv2.dilate(image, kernel, iterations=iterations)
    
    def manual_erosion(self, image, kernel):
        """Manually applies erosion to a binary image using the specified kernel."""
        k_height, k_width = kernel.shape
        padded_image = np.pad(image, ((k_height // 2, k_height // 2), (k_width // 2, k_width // 2)), mode='constant', constant_values=0)
        eroded_image = np.zeros_like(image)

        for i in range(image.shape[0]):
            for j in range(image.shape[1]):
                region = padded_image[i:i+k_height, j:j+k_width]
                if np.array_equal(region, kernel):
                    eroded_image[i, j] = 1
                else:
                    eroded_image[i, j] = 0

        return eroded_image

    def manual_dilation(self, image, kernel):
        """Manually applies dilation to a binary image using the specified kernel."""
        k_height, k_width = kernel.shape
        padded_image = np.pad(image, ((k_height // 2, k_height // 2), (k_width // 2, k_width // 2)), mode='constant', constant_values=0)
        dilated_image = np.zeros_like(image)

        for i in range(image.shape[0]):
            for j in range(image.shape[1]):
                region = padded_image[i:i+k_height, j:j+k_width]
                if np.any(region == 1):
                    dilated_image[i, j] = 1
                else:
                    dilated_image[i, j] = 0

        return dilated_image

    def display_results(self, original, eroded, dilated, title="Results"):
        """Displays the original, eroded, and dilated images side by side."""
        plt.figure(figsize=(10, 5))
        
        plt.subplot(1, 3, 1)
        plt.title('Original Image')
        plt.imshow(original, cmap='gray')
        
        plt.subplot(1, 3, 2)
        plt.title('Eroded Image')
        plt.imshow(eroded, cmap='gray')
        
        plt.subplot(1, 3, 3)
        plt.title('Dilated Image')
        plt.imshow(dilated, cmap='gray')
        
        plt.tight_layout()
        plt.show()

if __name__ == "__main__":
    # Step 1: Define the binary image and kernel
    image_matrix = np.array([[0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0], 
                             [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
                             [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                             [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
                             [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                             [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
                             [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype="uint8")
    
    kernel = np.ones((2, 2), np.uint8)

    # Step 2: Create an instance of the MorphologicalOperations class
    morph_ops = MorphologicalOperations()

    # Step 3: Apply erosion and dilation using OpenCV
    eroded_image_cv = morph_ops.apply_erosion(image_matrix, kernel)
    dilated_image_cv = morph_ops.apply_dilation(image_matrix, kernel)

    # Step 4: Apply manual erosion and dilation
    eroded_image_manual = morph_ops.manual_erosion(image_matrix, kernel)
    dilated_image_manual = morph_ops.manual_dilation(image_matrix, kernel)

    # Step 5: Display results (OpenCV implementation)
    morph_ops.display_results(image_matrix, eroded_image_cv, dilated_image_cv, title="OpenCV Erosion and Dilation")

    # Step 6: Display results (Manual implementation)
    morph_ops.display_results(image_matrix, eroded_image_manual, dilated_image_manual, title="Manual Erosion and Dilation")
