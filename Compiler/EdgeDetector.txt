import cv2
import numpy as np
import matplotlib.pyplot as plt
import math

class EdgeDetector:
    """
    A class to perform Gaussian blur and Sobel edge detection on images.

    Methods
    -------
    gaussian_blur(image, kernel_size, verbose=False):
        Applies Gaussian blur to the input image.
    
    sobel_edge_detection(image, verbose=False):
        Performs Sobel edge detection on the input image.
    
    apply_threshold(image, method="adaptive", verbose=False):
        Applies thresholding to an image using adaptive Gaussian or binary thresholding.
    
    segment_image(image, thresholded_image, verbose=False):
        Segments the input image based on contours detected in the thresholded image.
    
    convolution(image, kernel, average=False, verbose=False):
        Applies convolution to an input image with a specified kernel.
    """

    def __init__(self):
        pass

    def dnorm(self, x, mu, sd):
        """Normal distribution function."""
        return 1 / (np.sqrt(2 * np.pi) * sd) * np.e ** (-np.power((x - mu) / sd, 2) / 2)

    def gaussian_kernel(self, size, sigma=1, verbose=False):
        """Generates a Gaussian kernel."""
        kernel_1D = np.linspace(-(size // 2), size // 2, size)
        for i in range(size):
            kernel_1D[i] = self.dnorm(kernel_1D[i], 0, sigma)
        kernel_2D = np.outer(kernel_1D.T, kernel_1D.T)

        kernel_2D *= 1.0 / kernel_2D.max()

        if verbose:
            plt.imshow(kernel_2D, interpolation='none', cmap='gray')
            plt.title(f"Kernel ( {size}X{size} )")
            plt.show()

        return kernel_2D

    def convolution(self, image, kernel, average=False, verbose=False):
        """Applies convolution on an image using a specified kernel."""
        if len(image.shape) == 3:
            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        image_row, image_col = image.shape
        kernel_row, kernel_col = kernel.shape

        output = np.zeros(image.shape)
        pad_height = int((kernel_row - 1) / 2)
        pad_width = int((kernel_col - 1) / 2)

        padded_image = np.zeros((image_row + (2 * pad_height), image_col + (2 * pad_width)))
        padded_image[pad_height:padded_image.shape[0] - pad_height, pad_width:padded_image.shape[1] - pad_width] = image

        for row in range(image_row):
            for col in range(image_col):
                output[row, col] = np.sum(kernel * padded_image[row:row + kernel_row, col:col + kernel_col])
                if average:
                    output[row, col] /= kernel.shape[0] * kernel.shape[1]

        if verbose:
            plt.imshow(output, cmap='gray')
            plt.title("Convolution Output")
            plt.show()

        return output

    def gaussian_blur(self, image, kernel_size, verbose=False):
        """Applies Gaussian blur to an image."""
        kernel = self.gaussian_kernel(kernel_size, sigma=math.sqrt(kernel_size), verbose=verbose)
        return self.convolution(image, kernel, average=True, verbose=verbose)

    def sobel_edge_detection(self, image, verbose=False):
        """Performs Sobel edge detection on an image."""
        sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
        sobel_y = np.flip(sobel_x.T, axis=0)

        # Apply Sobel filter in both x and y directions
        image_x = self.convolution(image, sobel_x, verbose=verbose)
        image_y = self.convolution(image, sobel_y, verbose=verbose)

        # Compute gradient magnitude
        gradient_magnitude = np.sqrt(np.square(image_x) + np.square(image_y))
        gradient_magnitude *= 255.0 / gradient_magnitude.max()

        if verbose:
            plt.imshow(gradient_magnitude, cmap='gray')
            plt.title("Sobel Edge Detection (Gradient Magnitude)")
            plt.show()

        return gradient_magnitude

    def apply_threshold(self, image, method="adaptive", verbose=False):
        """Applies thresholding to an image using adaptive Gaussian or binary thresholding."""
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        if method == "adaptive":
            thresholded_image = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)
        else:
            _, thresholded_image = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)

        if verbose:
            plt.imshow(thresholded_image, cmap='gray')
            plt.title("Thresholded Image")
            plt.show()

        return thresholded_image

    def segment_image(self, image, thresholded_image, verbose=False):
        """Segments an image using contours found in the thresholded image."""
        contours, _ = cv2.findContours(thresholded_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        segmented_image = cv2.drawContours(image.copy(), contours, -1, (0, 255, 0), 3)

        if verbose:
            plt.imshow(cv2.cvtColor(segmented_image, cv2.COLOR_BGR2RGB))
            plt.title("Segmented Image")
            plt.show()

        return segmented_image


# Sample Step-by-Step Usage of the Class
if __name__ == "__main__":
    # Step 1: Load Image
    image = cv2.imread('imagefruits.jpeg')

    # Step 2: Initialize the EdgeDetector class
    detector = EdgeDetector()

    # Step 3: Apply Gaussian Blur
    blurred_image = detector.gaussian_blur(image, kernel_size=3, verbose=True)

    # Step 4: Apply Sobel Edge Detection
    edges = detector.sobel_edge_detection(blurred_image, verbose=True)

    # Step 5: Apply Thresholding
    thresholded = detector.apply_threshold(image, method="adaptive", verbose=True)

    # Step 6: Segment the Image
    segmented = detector.segment_image(image, thresholded, verbose=True)

