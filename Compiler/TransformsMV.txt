import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
from PIL import Image

class ImageProcessor:
    """
    A class to handle image processing tasks such as negative transformation, power transformation,
    log transformation, and image comparisons.

    Methods
    -------
    load_image(filepath):
        Loads an image from a given file path and converts it to a NumPy array.
        
    display_image(image, title="Image", cmap=None):
        Displays a single image using matplotlib.
        
    negative_transformation(image_array):
        Applies a negative transformation to the image array.
        
    power_transformation(image_array, gamma):
        Applies a power (gamma) transformation to the image array.
        
    log_transformation(image_array):
        Applies a logarithmic transformation to the image array.
        
    image_comparisons(image):
        Displays original, negative, power, and log-transformed images side by side.
    """

    def __init__(self, path):
        self.path = path

    def load_image(self, filename):
        """Loads an image from the specified file path."""
        image_path = os.path.join(self.path, filename)
        image = cv2.imread(image_path)
        if image is not None:
            return image
        else:
            raise FileNotFoundError(f"Image {filename} not found in {self.path}")

    def display_image(self, image, title="Image", cmap=None):
        """Displays a single image using matplotlib."""
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB) if cmap is None else image, cmap=cmap)
        plt.title(title)
        plt.axis('off')
        plt.show()

    def negative_transformation(self, image_array):
        """Applies a negative transformation to the image."""
        negative_image = 255 - image_array
        return negative_image

    def power_transformation(self, image_array, gamma=0.5):
        """Applies a power (gamma) transformation to the image."""
        transformed_image = np.power(image_array / 255.0, gamma) * 255.0
        return np.uint8(transformed_image)

    def log_transformation(self, image_array):
        """Applies a logarithmic transformation to the image."""
        c = 255 / np.log(1 + np.max(image_array))
        transformed_image = c * np.log(1 + image_array)
        return np.uint8(transformed_image)

    def image_comparisons(self, image, cmap=None):
        """Displays the original, negative, power, and log-transformed images side by side."""
        image_array = np.array(image)

        # Apply transformations
        negative_image = self.negative_transformation(image_array)
        power_image = self.power_transformation(image_array)
        log_image = self.log_transformation(image_array)

        # Display the original and transformed images
        plt.figure(figsize=(10, 8))

        plt.subplot(2, 2, 1)
        plt.imshow(image, cmap=cmap)
        plt.title('Original Image')
        plt.axis('off')

        plt.subplot(2, 2, 2)
        plt.imshow(negative_image, cmap=cmap)
        plt.title('Negative Image')
        plt.axis('off')

        plt.subplot(2, 2, 3)
        plt.imshow(power_image, cmap=cmap)
        plt.title('Power Transformed Image')
        plt.axis('off')

        plt.subplot(2, 2, 4)
        plt.imshow(log_image, cmap=cmap)
        plt.title('Log Transformed Image')
        plt.axis('off')

        plt.show()

    def channel_extraction(self, image):
        """Extracts and returns the red, green, and blue channels from the image."""
        image_array = np.asarray(image)
        red_channel = image_array[:, :, 0]
        green_channel = image_array[:, :, 1]
        blue_channel = image_array[:, :, 2]
        return red_channel, green_channel, blue_channel


if __name__ == "__main__":
    # Step 1: Define the path to your image directory
    image_dir = r"C:/Users/student/Desktop/Untitled Folder/pokemon-images-dataset-by-type-master/dragon/"

    # Step 2: Create an instance of the ImageProcessor class
    processor = ImageProcessor(image_dir)

    # Step 3: Load an image
    filename = "altaria.png"
    image = processor.load_image(filename)

    # Step 4: Display the original image
    processor.display_image(image, title="Original Image")

    # Step 5: Apply transformations and display comparisons
    processor.image_comparisons(image)

    # Step 6: Extract RGB channels
    red, green, blue = processor.channel_extraction(image)

    # Step 7: Display each channel separately
    plt.figure(figsize=(12, 4))
    
    plt.subplot(1, 3, 1)
    plt.imshow(red, cmap='gray')
    plt.title('Red Channel')
    plt.axis('off')

    plt.subplot(1, 3, 2)
    plt.imshow(green, cmap='gray')
    plt.title('Green Channel')
    plt.axis('off')

    plt.subplot(1, 3, 3)
    plt.imshow(blue, cmap='gray')
    plt.title('Blue Channel')
    plt.axis('off')

    plt.show()
